library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-15
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=20))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
#check side by side matrix
#a<-merge(target,y_Output, by="row.names", all=TRUE)
#time cheing
#start.time <- Sys.time()
#end.time <- Sys.time()
#time.taken <- end.time - start.time
#cat(time.taken)
#cat("\n\n")
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-25
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=20))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-10
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-15
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-100
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-30
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-40
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-40
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
tempH<-as.matrix(tempH[-1,])    #delete 1st row of matrix tempH because it's NA
H<-t(matrix(tempH, nrow=nHiddenNode))    #create matrix H (Hidden layer matrix)
H_MPinv<-MPinv(H)   #Moore penrose pseudoinvers matrix H
wHiddenOutput<-H_MPinv %*% target   #weight between hidden and output layer
y_Output<-H %*% wHiddenOutput       #calculate output
#rounding output value into numeric class target
predicted<-as.matrix(apply(y_Output, 1, function(x) round(x, digit=0)))
predicted<-as.matrix(apply(predicted, 1, function(x) if(x==0){x=1} else{x=x}))
end.time <- Sys.time()
time.taken <- end.time - start.time
cat(time.taken)
cat("\n\n")
#training error checking
ce(target,predicted)
mse(target,predicted)
rmse(target,predicted)
### E L M   T R A I N I N G
###
library(gnm)
library(gdata)
library(Metrics)
setwd("Z:/TEMP FD/SKRIPSI/Data/Scrap")      #set working directory
dataset <- read.csv(file="train1.csv", header=TRUE, sep=",")    #read csv dataset
maxParamIndex<-ncol(dataset)-1          #column index limit of parameter data
parameter<-dataset[,1:maxParamIndex]    #parameter data
target<-matrix(dataset[,ncol(dataset)], ncol=1)  #target data
paramNorm<-apply(parameter, MARGIN = 2, FUN = function(X) (X - min(X))/(max(X)-min(X))) #normalize parameter data
nData=length(target)  #nData=nrow(parameter)    #data amount
nInput=ncol(parameter) #number of input
#determine the activation function that will be used
#examples: unipolar sigmoid, bipolar sigmoid, sine, hard-limit, hyperbolic tangent, fourier series
actFun<-"unipolar sigmoid"
#determine number of hidden nodes
nHiddenNode<-1000
#random generate weight input and biases of hidden neurons
ordoMatrixH<-nHiddenNode*nInput
wInputHidden<-runif(ordoMatrixH, min=0, max=1)  #random weight input-hidden layer
wMatrixInputHidden<-matrix(wInputHidden, ncol=nHiddenNode) #create matrix for weight input-hidden layer
bInputHidden<-runif(nHiddenNode, min=0, max=1)  #random bias for each hidden node
#create temp H matrix
tempH<-matrix()
start.time <- Sys.time()
for(i in 1:nData){
for(k in 1:nHiddenNode){
sumNet<-0
for(j in 1:nInput){
#sum x.w
net<-paramNorm[i,j]*wMatrixInputHidden[j,k]
sumNet<-sumNet+net
}
z<-sumNet+bInputHidden[k]   #zNet value
#calculate activation function
if(actFun=="unipolar sigmoid"){
gx<-1/(1+exp(-z))       #calculate g(x)
tempH<-rbind(tempH,gx)  #insert k-th H(x) into matrix
}
}
}
